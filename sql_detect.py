# coding: utf8
import re
import random
import os
import sys
import httplib2
import urlAudit

class SQL_detect():
    def __init__(self):
        self.DBMS_ERRORS = {
            "MySQL": (r"SQL syntax.*MySQL", r"Warning.*mysql_.*", r"valid MySQL result", r"MySqlClient\."),
            "PostgreSQL": (r"PostgreSQL.*ERROR", r"Warning.*\Wpg_.*", r"valid PostgreSQL result", r"Npgsql\."),
            "Microsoft SQL Server": (
            r"Driver.* SQL[\-\_\ ]*Server", r"OLE DB.* SQL Server", r"(\W|\A)SQL Server.*Driver", r"Warning.*mssql_.*",
            r"(\W|\A)SQL Server.*[0-9a-fA-F]{8}", r"(?s)Exception.*\WSystem\.Data\.SqlClient\.",
            r"(?s)Exception.*\WRoadhouse\.Cms\."),
            "Microsoft Access": (r"Microsoft Access Driver", r"JET Database Engine", r"Access Database Engine"),
            "Oracle": (r"\bORA-[0-9][0-9][0-9][0-9]", r"Oracle error", r"Oracle.*Driver", r"Warning.*\Woci_.*",
                       r"Warning.*\Wora_.*"),
            "IBM DB2": (r"CLI Driver.*DB2", r"DB2 SQL error", r"\bdb2_\w+\("),
            "SQLite": (
            r"SQLite/JDBCDriver", r"SQLite.Exception", r"System.Data.SQLite.SQLiteException", r"Warning.*sqlite_.*",
            r"Warning.*SQLite3::", r"\[SQLITE_ERROR\]"),
            "Sybase": (r"(?i)Warning.*sybase.*", r"Sybase message", r"Sybase.*Server message.*"),
        }
        """
        self.payload = []
        filename = os.path.join(sys.path[0], "Data", "xss_payload.txt")
        f = open(filename)
        for i in f:
            self.payload.append(i.strip())
        """
        self.url = 'http://www.baidu.com/'

    def sql_check(self):
        http = httplib2.Http()
        content = http.request(self.url)[1]
        #print(content.decode())
        #filename = "web.txt"
        #f = open(filename, 'w')
        #f.write(content)
        for (dbms, regex) in ((dbms, regex) for dbms in self.DBMS_ERRORS for regex in self.DBMS_ERRORS[dbms]):
            if re.search(regex, content):
                return dbms

    def detect(self):
        test = urlAudit.UrlAudit()
        testurl = test.param(self.url)
        if testurl:
            rooturl, query, query_length = test.split(self.url.rstrip('\n'))




